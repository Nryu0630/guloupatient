// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oGeya3WnsoRJC1KzKAMsFn
// Component: Z47qr9FlKs7a

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oGeya3WnsoRJC1KzKAMsFn/projectcss
import sty from "./Plasmic_124PrecautionsForInspectionOnTheSameDay.module.css"; // plasmic-import: Z47qr9FlKs7a/css

createPlasmicElementProxy;

export type Plasmic_124PrecautionsForInspectionOnTheSameDay__VariantMembers =
  {};
export type Plasmic_124PrecautionsForInspectionOnTheSameDay__VariantsArgs = {};
type VariantPropType =
  keyof Plasmic_124PrecautionsForInspectionOnTheSameDay__VariantsArgs;
export const Plasmic_124PrecautionsForInspectionOnTheSameDay__VariantProps =
  new Array<VariantPropType>();

export type Plasmic_124PrecautionsForInspectionOnTheSameDay__ArgsType = {};
type ArgPropType =
  keyof Plasmic_124PrecautionsForInspectionOnTheSameDay__ArgsType;
export const Plasmic_124PrecautionsForInspectionOnTheSameDay__ArgProps =
  new Array<ArgPropType>();

export type Plasmic_124PrecautionsForInspectionOnTheSameDay__OverridesType = {
  root?: Flex__<"div">;
};

export interface Default_124PrecautionsForInspectionOnTheSameDayProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmic_124PrecautionsForInspectionOnTheSameDay__RenderFunc(props: {
  variants: Plasmic_124PrecautionsForInspectionOnTheSameDay__VariantsArgs;
  args: Plasmic_124PrecautionsForInspectionOnTheSameDay__ArgsType;
  overrides: Plasmic_124PrecautionsForInspectionOnTheSameDay__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox___8DVvA)}>
          <div className={classNames(projectcss.all, sty.freeBox__qiKhW)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pK0Nb
              )}
            >
              {"\u6587\u7ae0"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__df0X)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__lap7J)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"25%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return $ctx.config.routePrefix + "/";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
              src={{
                src: "/plasmic/gu_lou_patient/images/资源162Xpng.png",
                fullWidth: 198,
                fullHeight: 198,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__l9Haj
              )}
            >
              {"\u9000\u51fa"}
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__k5Y9Q)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__pbwK)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/gu_lou_patient/images/_560转换01Png.png",
              fullWidth: 1201,
              fullHeight: 351,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lwHb4
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{
                  id: "ne6N8JGRae",
                  src: "康复训练",
                  dst: "rehabilitation training "
                }}
              >
                {"\u68c0\u67e5\u6ce8\u610f\u4e8b\u9879"}
              </span>
            </React.Fragment>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__apPpb)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__p5B6
              )}
            >
              {
                "\u60a3\u8005\u65b0\u5165\u9662\u65f6\uff0c\u4f1a\u505a\u5404\u79cd\u68c0\u67e5\uff0c\u6bd4\u5982\uff1a\u5316\u9a8c\u5927\u5c0f\u4fbf\u3001\u62bd\u8840\u3001B\u8d85\uff0c\u90a3\u4e48\u505a\u8fd9\u4e9b\u68c0\u67e5\u6709\u4ec0\u4e48\u4f5c\u7528\u548c\u76ee\u7684\uff1f\u6ce8\u610f\u4e8b\u9879\u662f\u4ec0\u4e48\uff1f\u63a5\u4e0b\u6765\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u4e0b\u3002\n\n\u4e00\u3001\u5927\u5c0f\u4fbf\u68c0\u67e5\n\u5927\u5c0f\u4fbf\u68c0\u67e5\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u68c0\u67e5\u9879\u76ee\uff0c\u53ef\u4ee5\u68c0\u6d4b\u51fa\u4eba\u7684\u6d88\u5316\u9053\u3001\u80f0\u817a\u3001\u809d\u80c6\u4ee5\u53ca\u8840\u7cd6\u3001\u8840\u6db2\u7b49\u75be\u75c5\u3002\n\n\u5c0f\u4fbf\u53d6\u6837\u65b9\u6cd5\n1\u3001\u5c06\u5c0f\u4fbf\u7528\u5c3f\u676f\u88c5\u76db\uff0c\u7136\u540e\u5012\u5165\u8bd5\u7ba1\u4e2d\uff0c\u5c3d\u91cf\u91c7\u7528\u65e9\u4e0a\u7b2c\u4e00\u6b21\u7684\u4e2d\u6bb5\u5c3f\uff08\u5c31\u662f\u6392\u5c3f\u5f00\u59cb\u7684\u90a3\u6bb5\u5c3f\u6db2\u4e0d\u8981\u63a5\uff0c\u7136\u540e\u7528\u5c3f\u676f\u63a5\u4e2d\u95f4\u7684\u90e8\u5206\uff09\uff0c\u8981\u6c4210ml\u4ee5\u4e0a\uff08\u8bb0\u4f4f\u770b\u7ba1\u5b50\u4e0a\u7684\u523b\u5ea6\uff09\u3002\n2\u3001\u5e94\u7559\u53d6\u65b0\u9c9c\u5c3f\u6db2\uff0c\u57282\u5c0f\u65f6\u5185\u9001\u68c0\u3002\n3\u3001\u5973\u6027\u6708\u7ecf\u671f\u95f4\u6682\u4e0d\u5b9c\u7559\u53d6\u5c0f\u4fbf\u6807\u672c\uff08\u5f71\u54cd\u68c0\u9a8c\u7ed3\u679c\uff09\u3002\n\n\u5927\u4fbf\u53d6\u6837\u65b9\u6cd5\n\n1\u3001\u53d6\u4e00\u5e73\u52fa\u5927\u4fbf\uff0c\u88c5\u5165\u53d6\u6837\u7ba1\u4e2d\uff08\u5bf9\uff0c\u8bb0\u4f4f\u4e0d\u8981\u6316\u592a\u591a~\uff09\uff0c\u5efa\u8bae\u7559\u53d6\u65e9\u6668\u7a7a\u8179\u7b2c\u4e00\u6b21\u6392\u7684\u5927\u4fbf\u3002\n2\u3001\u6311\u9009\u6709\u8840\u6db2\u6216\u8113\u6db2\u90e8\u5206\u53d6\u6837\u3002\n3\u3001\u4e0d\u8981\u6df7\u5165\u5c3f\u6db2\u3001\u6c34\u6216\u5176\u4ed6\u5f02\u7269\uff0c\u9001\u68c0\u65f6\u95f4\u4e00\u822c\u4e0d\u8d85\u8fc7\u4e24\u4e2a\u5c0f\u65f6\u3002"
              }
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__xXma5)}
            onClick={async event => {
              const $steps = {};

              $steps["goToPage"] = true
                ? (() => {
                    const actionArgs = {
                      destination: (() => {
                        try {
                          return (
                            $ctx.config.routePrefix +
                            "/Onthedayofadmissionthenursingteam"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zAgJl
              )}
            >
              {"\u8fd4\u56de"}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_124PrecautionsForInspectionOnTheSameDay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_124PrecautionsForInspectionOnTheSameDay__VariantsArgs;
    args?: Plasmic_124PrecautionsForInspectionOnTheSameDay__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    Plasmic_124PrecautionsForInspectionOnTheSameDay__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      Plasmic_124PrecautionsForInspectionOnTheSameDay__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            Plasmic_124PrecautionsForInspectionOnTheSameDay__ArgProps,
          internalVariantPropNames:
            Plasmic_124PrecautionsForInspectionOnTheSameDay__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic_124PrecautionsForInspectionOnTheSameDay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_124PrecautionsForInspectionOnTheSameDay";
  } else {
    func.displayName = `Plasmic_124PrecautionsForInspectionOnTheSameDay.${nodeName}`;
  }
  return func;
}

export const Plasmic_124PrecautionsForInspectionOnTheSameDay = Object.assign(
  // Top-level Plasmic_124PrecautionsForInspectionOnTheSameDay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for Plasmic_124PrecautionsForInspectionOnTheSameDay
    internalVariantProps:
      Plasmic_124PrecautionsForInspectionOnTheSameDay__VariantProps,
    internalArgProps: Plasmic_124PrecautionsForInspectionOnTheSameDay__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default Plasmic_124PrecautionsForInspectionOnTheSameDay;
/* prettier-ignore-end */
