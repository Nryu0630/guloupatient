// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oGeya3WnsoRJC1KzKAMsFn
// Component: jEclp1wVOfdR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oGeya3WnsoRJC1KzKAMsFn/projectcss
import sty from "./Plasmic_125IndicationsForReferralToRehabilitationDepartment.module.css"; // plasmic-import: jEclp1wVOfdR/css

createPlasmicElementProxy;

export type Plasmic_125IndicationsForReferralToRehabilitationDepartment__VariantMembers =
  {};
export type Plasmic_125IndicationsForReferralToRehabilitationDepartment__VariantsArgs =
  {};
type VariantPropType =
  keyof Plasmic_125IndicationsForReferralToRehabilitationDepartment__VariantsArgs;
export const Plasmic_125IndicationsForReferralToRehabilitationDepartment__VariantProps =
  new Array<VariantPropType>();

export type Plasmic_125IndicationsForReferralToRehabilitationDepartment__ArgsType =
  {};
type ArgPropType =
  keyof Plasmic_125IndicationsForReferralToRehabilitationDepartment__ArgsType;
export const Plasmic_125IndicationsForReferralToRehabilitationDepartment__ArgProps =
  new Array<ArgPropType>();

export type Plasmic_125IndicationsForReferralToRehabilitationDepartment__OverridesType =
  {
    root?: Flex__<"div">;
  };

export interface Default_125IndicationsForReferralToRehabilitationDepartmentProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmic_125IndicationsForReferralToRehabilitationDepartment__RenderFunc(props: {
  variants: Plasmic_125IndicationsForReferralToRehabilitationDepartment__VariantsArgs;
  args: Plasmic_125IndicationsForReferralToRehabilitationDepartment__ArgsType;
  overrides: Plasmic_125IndicationsForReferralToRehabilitationDepartment__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__lAgf2)}>
          <div className={classNames(projectcss.all, sty.freeBox__usrId)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xlZy4
              )}
            >
              {"\u6587\u7ae0"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__nxE3K)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___9ESdr)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"25%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return $ctx.config.routePrefix + "/";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
              src={{
                src: "/plasmic/gu_lou_patient/images/资源162Xpng.png",
                fullWidth: 198,
                fullHeight: 198,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uhXue
              )}
            >
              {"\u9000\u51fa"}
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__udAne)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__ghdXx)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: "/plasmic/gu_lou_patient/images/_13879转换01Png.png",
              fullWidth: 1801,
              fullHeight: 521,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__aGPxx
            )}
          >
            {"\u8f6c\u8bca\u5eb7\u590d\u79d1\u6307\u5f81\uff1a"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__a2BlT)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4W8O4
              )}
            >
              {
                "\u80a1\u9aa8\u9888\u9aa8\u6298\n\u4e00\u3001\u4e0a\u8f6c\u6307\u5357\n\u7ecfX\u7ebf\u6444\u7247\u786e\u8bca\u4e3aGarden\u5206\u578bII-IV\u7ea7\u7684\u80a1\u9aa8\u9888\u9aa8\u6298\u75c5\u4eba\u9700\u8981\u624b\u672f\u6cbb\u7597\u8005\uff0c\u7ecf\u8fc7\u60a3\u8005\u540c\u610f\uff0c\u5e76\u5145\u5206\u5c0a\u91cd\u81ea\u4e3b\u9009\u62e9\u6743\u7684\u60c5\u51b5\n\u4e0b\uff0c\u5c06\u60a3\u8005\u8f6c\u5f80\u4e8c\u7ea7\u4ee5\u4e0a\u7684\u533b\u9662\uff0c\u5982\u9700\u4f5c\u4eba\u5de5\u5173\u8282\u7f6e\u6362\uff0c\u5e94\u8f6c\u81f3\u4e09\u7ea7\u533b\u9662\u6cbb\u7597\u3002\n\u4e8c\u3001\u4e0b\u8f6c\u6307\u5357\n\u7ecfX\u7ebf\u6444\u7247\u786e\u8bca\u4e3aGarden\u5206\u578bI\u578b\uff0c\u6216\u5e74\u8001\u4f53\u5f31\uff0c\u5168\u8eab\u5408\u5e76\u75be\u75c5\u591a\uff0c\u4e0d\u80fd\u8010\u53d7\u624b\u672f\u6216\u4e0d\u613f\u624b\u672f\uff0c\u91c7\u53d6\u4fdd\u5b88\u6cbb\u7597\u7684\u60a3\u8005\uff0c\u7ecf\u60a3\n\u8005\u540c\u610f\uff0c\u5e76\u5145\u5206\u5c0a\u91cd\u5176\u9009\u62e9\u6743\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u60a3\u8005\u8f6c\u5f80\u57fa\u5c42\u533b\u9662\u536b\u751f\u673a\u6784\u6cbb\u7597\u6216\u7ba1\u7406\u3002"
              }
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__iKihh)}
            onClick={async event => {
              const $steps = {};

              $steps["goToPage"] = true
                ? (() => {
                    const actionArgs = {
                      destination: (() => {
                        try {
                          return $ctx.config.routePrefix + "/Functionalscale";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3QZ8
              )}
            >
              {"\u8fd4\u56de"}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_125IndicationsForReferralToRehabilitationDepartment__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_125IndicationsForReferralToRehabilitationDepartment__VariantsArgs;
    args?: Plasmic_125IndicationsForReferralToRehabilitationDepartment__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    Plasmic_125IndicationsForReferralToRehabilitationDepartment__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      Plasmic_125IndicationsForReferralToRehabilitationDepartment__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            Plasmic_125IndicationsForReferralToRehabilitationDepartment__ArgProps,
          internalVariantPropNames:
            Plasmic_125IndicationsForReferralToRehabilitationDepartment__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic_125IndicationsForReferralToRehabilitationDepartment__RenderFunc(
      { variants, args, overrides, forNode: nodeName }
    );
  };
  if (nodeName === "root") {
    func.displayName =
      "Plasmic_125IndicationsForReferralToRehabilitationDepartment";
  } else {
    func.displayName = `Plasmic_125IndicationsForReferralToRehabilitationDepartment.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"oGeya3WnsoRJC1KzKAMsFn"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "oGeya3WnsoRJC1KzKAMsFn"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const Plasmic_125IndicationsForReferralToRehabilitationDepartment =
  Object.assign(
    // Top-level Plasmic_125IndicationsForReferralToRehabilitationDepartment renders the root element
    withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
    {
      // Helper components rendering sub-elements

      // Metadata about props expected for Plasmic_125IndicationsForReferralToRehabilitationDepartment
      internalVariantProps:
        Plasmic_125IndicationsForReferralToRehabilitationDepartment__VariantProps,
      internalArgProps:
        Plasmic_125IndicationsForReferralToRehabilitationDepartment__ArgProps,

      // Page metadata
      pageMetadata: {
        title: "",
        description: "",
        ogImageSrc: "",
        canonical: ""
      }
    }
  );

export default Plasmic_125IndicationsForReferralToRehabilitationDepartment;
/* prettier-ignore-end */
