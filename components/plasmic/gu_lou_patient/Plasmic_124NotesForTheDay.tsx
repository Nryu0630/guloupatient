// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oGeya3WnsoRJC1KzKAMsFn
// Component: -XlZef030BwK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oGeya3WnsoRJC1KzKAMsFn/projectcss
import sty from "./Plasmic_124NotesForTheDay.module.css"; // plasmic-import: -XlZef030BwK/css

createPlasmicElementProxy;

export type Plasmic_124NotesForTheDay__VariantMembers = {};
export type Plasmic_124NotesForTheDay__VariantsArgs = {};
type VariantPropType = keyof Plasmic_124NotesForTheDay__VariantsArgs;
export const Plasmic_124NotesForTheDay__VariantProps =
  new Array<VariantPropType>();

export type Plasmic_124NotesForTheDay__ArgsType = {};
type ArgPropType = keyof Plasmic_124NotesForTheDay__ArgsType;
export const Plasmic_124NotesForTheDay__ArgProps = new Array<ArgPropType>();

export type Plasmic_124NotesForTheDay__OverridesType = {
  root?: Flex__<"div">;
};

export interface Default_124NotesForTheDayProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmic_124NotesForTheDay__RenderFunc(props: {
  variants: Plasmic_124NotesForTheDay__VariantsArgs;
  args: Plasmic_124NotesForTheDay__ArgsType;
  overrides: Plasmic_124NotesForTheDay__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__bOPw)}>
          <div className={classNames(projectcss.all, sty.freeBox__jEgmy)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__h0HQ
              )}
            >
              {"\u6587\u7ae0"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___4PWzu)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__cFoVb)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"25%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return $ctx.config.routePrefix + "/";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
              src={{
                src: "/plasmic/gu_lou_patient/images/资源162Xpng.png",
                fullWidth: 198,
                fullHeight: 198,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__neyqY
              )}
            >
              {"\u9000\u51fa"}
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__bLg78)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__hnvjI)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/gu_lou_patient/images/_560转换01Png.png",
              fullWidth: 1201,
              fullHeight: 351,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7PGix
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{
                  id: "ne6N8JGRae",
                  src: "康复训练",
                  dst: "rehabilitation training "
                }}
              >
                {" \u6ce8\u610f\u4e8b\u9879"}
              </span>
            </React.Fragment>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__gVnu4)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cBiC3
              )}
            >
              {
                "\u5165\u9662\u662f\u6307\u60a3\u8005\u56e0\u75c5\u60c5\u9700\u8981\u4f4f\u9662\u6cbb\u7597\u800c\u524d\u5f80\u533b\u7597\u673a\u6784\u63a5\u53d7\u6cbb\u7597\u548c\u62a4\u7406\u7684\u8fc7\u7a0b\u3002\u5165\u9662\u671f\u95f4\uff0c\u60a3\u8005\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762:\n1.\u9884\u7ea6\u548c\u51c6\u5907\u5165\u9662:\u63d0\u524d\u9884\u7ea6\u5165\u9662\uff0c\u4e86\u89e3\u533b\u9662\u7684\u89c4\u5b9a\u548c\u8981\u6c42\u3002\u51c6\u5907\u5fc5\u8981\u7684id\u4ef6\u3001\u533b\u4fdd\u5361\u3001\u4f4f\u9662\u8bc1\u660e\u7b49\u6587\u4ef6\uff0c\u4ee5\u4fbf\u987a\u5229\u8fdb\n\u884c\u5165\u9662\u624b\u7eed\u3002\n2.\u884c\u674e\u548c\u8d35\u91cd\u7269\u54c1:\u60a3\u8005\u5165\u9662\u65f6\u8981\u5e26\u9f50\u5fc5\u9700\u7684\u8863\u7269\u548c\u4e2a\u4eba\u7528\u54c1\uff0c\u5982\u5185\u8863\u3001\u7761\u8863\u3001\u7259\u5237\u3001\u6bdb\u5dfe\u7b49\u3002\u540c\u65f6\uff0c\u8981\u6ce8\u610f\u4fdd\u7ba1\u597d\u8d35\u91cd\u7269\u54c1\uff0c\u5982\u73b0\u91d1\u3001\u624b\u673a\u3001\u9996\u9970\u7b49\uff0c\u53ef\u4ee5\u5c06\u5176\u5b58\u653e\u5728\u533b\u9662\u63d0\u4f9b\u7684\u4fdd\u9669\u67dc\u4e2d\uff0c\u907f\u514d\u4e22\u5931\u3002\n3.\u4e86\u89e3\u75c5\u60c5\u548c\u6cbb\u7597\u65b9\u6848:\u60a3\u8005\u5165\u9662\u540e\uff0c\u8981\u4e86\u89e3\u81ea\u5df1\u7684\u75c5\u60c5\u548c\u533b\u751f\u7ed9\u51fa\u7684\u6cbb\u7597\u65b9\u6848\uff0c\u5305\u62ec\u836f\u7269\u6cbb\u7597\u3001\u624b\u672f\u6cbb\u7597\u7b49\u3002\u4e0e\u533b\u751f\u548c\u62a4\u58eb\u8fdb\u884c\u5145\u5206\u6c9f\u901a\uff0c\u660e\u786e\u6cbb\u7597\u76ee\u6807\u548c\u9884\u671f\u6548\u679c\u3002\n4.\u9075\u5b88\u533b\u9662\u7684\u89c4\u7ae0\u5236\u5ea6:\u5165\u9662\u540e\uff0c\u8981\u9075\u5b88\u533b\u9662\u7684\u89c4\u7ae0\u5236\u5ea6\uff0c\u5982\u4e0d\u5728\u75c5\u623f\u5185\u5438\u70df\u3001\u4e0d\u4e71\u4e22\u5783\u573e\u3001\u4e0d\u5927\u58f0\u55a7\u54d7\u7b49\u3002\u540c\u65f6\uff0c\u8981\u5c0a\u91cd\u533b\u52a1\u4eba\u5458\u7684\u5de5\u4f5c\u65f6\u95f4\u548c\u9690\u79c1\uff0c\u907f\u514d\u65e0\u6545\u6253\u6270\u3002\n5. \u5b88\u65f6\u5c31\u8bca\u548c\u670d\u836f:\u60a3\u8005\u5728\u533b\u9662\u5c31\u8bca\u65f6\uff0c\u8981\u6309\u7167\u9884\u7ea6\u65f6\u95f4\u5230\u8fbe\uff0c\u5e76\u4e3b\u52a8\u914d\u5408\u533b\u751f\u7684\u68c0\u67e5\u548c\u6cbb\u7597\u3002\u540c\u65f6\uff0c\u8981\u6309\u7167\u533b\u751f\u7684\u5631\u6258\u51c6\u65f6\u670d\u836f\uff0c\u907f\u514d\u6f0f\u670d\u6216\u8fc7\u91cf\u3002\n6,\u6ce8\u610f\u4e2a\u4eba\u536b\u751f:\u5165\u6665\u671f\u95f4\uff0c\u60a3\u8005\u8981\u6ce8\u610f\u4e2a\u4eba\u536b\u751f\uff0c\u52e4\u6d17\u624b\u3001\u52e4\u6d17\u6fa1\uff0c\u4fdd\u6301\u8eab\u4f53\u6e05\u6d01\u3002\u907f\u514d\u4e0e\u5176\u4ed6\u60a3\u8005\u5171\u7528\u6d17\u6f31\u7528\u54c1\u548c\u6bdb\u5dfe\uff0c\u4ee5\u514d\u4ea4\u53c9\u611f\u67d3\u3002"
              }
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__aooOk)}
            onClick={async event => {
              const $steps = {};

              $steps["goToPage"] = true
                ? (() => {
                    const actionArgs = {
                      destination: (() => {
                        try {
                          return (
                            $ctx.config.routePrefix +
                            "/Onthedayofadmissionthenursingteam"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wSRgv
              )}
            >
              {"\u8fd4\u56de"}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_124NotesForTheDay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_124NotesForTheDay__VariantsArgs;
    args?: Plasmic_124NotesForTheDay__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_124NotesForTheDay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      Plasmic_124NotesForTheDay__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmic_124NotesForTheDay__ArgProps,
          internalVariantPropNames: Plasmic_124NotesForTheDay__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic_124NotesForTheDay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_124NotesForTheDay";
  } else {
    func.displayName = `Plasmic_124NotesForTheDay.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"oGeya3WnsoRJC1KzKAMsFn"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "oGeya3WnsoRJC1KzKAMsFn"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const Plasmic_124NotesForTheDay = Object.assign(
  // Top-level Plasmic_124NotesForTheDay renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for Plasmic_124NotesForTheDay
    internalVariantProps: Plasmic_124NotesForTheDay__VariantProps,
    internalArgProps: Plasmic_124NotesForTheDay__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default Plasmic_124NotesForTheDay;
/* prettier-ignore-end */
