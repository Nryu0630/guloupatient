// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oGeya3WnsoRJC1KzKAMsFn
// Component: KKJsW6jZpEea

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oGeya3WnsoRJC1KzKAMsFn/projectcss
import sty from "./Plasmic_121FunctionalScale.module.css"; // plasmic-import: KKJsW6jZpEea/css

createPlasmicElementProxy;

export type Plasmic_121FunctionalScale__VariantMembers = {};
export type Plasmic_121FunctionalScale__VariantsArgs = {};
type VariantPropType = keyof Plasmic_121FunctionalScale__VariantsArgs;
export const Plasmic_121FunctionalScale__VariantProps =
  new Array<VariantPropType>();

export type Plasmic_121FunctionalScale__ArgsType = {};
type ArgPropType = keyof Plasmic_121FunctionalScale__ArgsType;
export const Plasmic_121FunctionalScale__ArgProps = new Array<ArgPropType>();

export type Plasmic_121FunctionalScale__OverridesType = {
  root?: Flex__<"div">;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  radioGroup2?: Flex__<typeof AntdRadioGroup>;
  radioGroup3?: Flex__<typeof AntdRadioGroup>;
  radioGroup4?: Flex__<typeof AntdRadioGroup>;
  radioGroup5?: Flex__<typeof AntdRadioGroup>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface Default_121FunctionalScaleProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmic_121FunctionalScale__RenderFunc(props: {
  variants: Plasmic_121FunctionalScale__VariantsArgs;
  args: Plasmic_121FunctionalScale__ArgsType;
  overrides: Plasmic_121FunctionalScale__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "radioGroup2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "radioGroup3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "radioGroup4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "radioGroup5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox___8P56E)}>
          <div className={classNames(projectcss.all, sty.freeBox__jApWi)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mVqD4
              )}
            >
              {"\u91cf\u8868"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__oNudd)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__iy7Tf)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"25%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return $ctx.config.routePrefix + "/";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
              src={{
                src: "/plasmic/gu_lou_patient/images/资源162Xpng.png",
                fullWidth: 198,
                fullHeight: 198,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eEs5
              )}
            >
              {"\u9000\u51fa"}
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__eNlVw)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__wlbdc)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/gu_lou_patient/images/_560转换01Png.png",
              fullWidth: 1201,
              fullHeight: 351,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lauW
            )}
          >
            {"\u65e5\u5e38\u751f\u6d3b\u6d3b\u52a8ADL"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__zUqa9)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1Qes6
              )}
            >
              {"1\u3001\u5927\u4fbf"}
            </div>
            <AntdRadioGroup
              data-plasmic-name={"radioGroup"}
              data-plasmic-override={overrides.radioGroup}
              className={classNames("__wab_instance", sty.radioGroup)}
              disabled={false}
              onChange={generateStateOnChangeProp($state, [
                "radioGroup",
                "value"
              ])}
              optionType={"default"}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: null, label: null }
                ];
                __composite["0"]["value"] = "\u5931\u7981\u6216\u660f\u8ff7 ";
                __composite["0"]["label"] = "\u5931\u7981\u6216\u660f\u8ff7 ";
                __composite["1"]["value"] =
                  "\u5076\u5c14\u5931\u7981\u6bcf\u5468<1\u6b21 \u80fd\u63a7\u5236";
                __composite["1"]["label"] =
                  "\u5076\u5c14\u5931\u7981\u6bcf\u5468<1\u6b21 \u80fd\u63a7\u5236";
                return __composite;
              })()}
              useChildren={false}
              value={generateStateValueProp($state, ["radioGroup", "value"])}
            >
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__soa8D)}
                value={"op1"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hvLVn
                  )}
                >
                  {"Option 1"}
                </div>
              </AntdRadio>
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__kcvOt)}
                value={"op2"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4OG9D
                  )}
                >
                  {"Option 2"}
                </div>
              </AntdRadio>
            </AntdRadioGroup>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__xSkC)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pe8FL
              )}
            >
              {"2\u3001\u5c0f\u4fbf"}
            </div>
            <AntdRadioGroup
              data-plasmic-name={"radioGroup2"}
              data-plasmic-override={overrides.radioGroup2}
              className={classNames("__wab_instance", sty.radioGroup2)}
              disabled={false}
              onChange={generateStateOnChangeProp($state, [
                "radioGroup2",
                "value"
              ])}
              optionType={"default"}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null, label: null }
                ];
                __composite["0"]["value"] =
                  "\u5931\u7981\u6216\u660f\u8ff7\u6216\u9700\u7531\u4ed6\u4eba\u5bfc\u5c3f ";
                __composite["0"]["label"] =
                  "\u5931\u7981\u6216\u660f\u8ff7\u6216\u9700\u7531\u4ed6\u4eba\u5bfc\u5c3f ";
                __composite["1"]["value"] =
                  "\u5076\u5c14\u5931\u7981\u6bcf24\u5c0f\u65f6<1\u6b21\uff0c\u6bcf\u5468>1\u6b21 ";
                __composite["1"]["label"] =
                  "\u5076\u5c14\u5931\u7981\u6bcf24\u5c0f\u65f6<1\u6b21\uff0c\u6bcf\u5468>1\u6b21 ";
                __composite["2"]["value"] = "\u80fd\u63a7\u5236";
                __composite["2"]["label"] = "\u80fd\u63a7\u5236";
                return __composite;
              })()}
              useChildren={false}
              value={generateStateValueProp($state, ["radioGroup2", "value"])}
            >
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__iElA)}
                value={"op1"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cq1Az
                  )}
                >
                  {"Option 1"}
                </div>
              </AntdRadio>
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__fOzYl)}
                value={"op2"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__q8Tge
                  )}
                >
                  {"Option 2"}
                </div>
              </AntdRadio>
            </AntdRadioGroup>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___06SRb)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vuT7J
              )}
            >
              {"3\u3001\u4fee\u9970"}
            </div>
            <AntdRadioGroup
              data-plasmic-name={"radioGroup3"}
              data-plasmic-override={overrides.radioGroup3}
              className={classNames("__wab_instance", sty.radioGroup3)}
              disabled={false}
              onChange={generateStateOnChangeProp($state, [
                "radioGroup3",
                "value"
              ])}
              optionType={"default"}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: null, label: null }
                ];
                __composite["0"]["value"] = "\u9700\u5e2e\u52a9";
                __composite["0"]["label"] = "\u9700\u5e2e\u52a9";
                __composite["1"]["value"] =
                  "\u72ec\u7acb\u6d17\u8138\u3001\u68b3\u5934\u3001\u5237\u7259\u3001\u5243\u987b";
                __composite["1"]["label"] =
                  "\u72ec\u7acb\u6d17\u8138\u3001\u68b3\u5934\u3001\u5237\u7259\u3001\u5243\u987b";
                return __composite;
              })()}
              useChildren={false}
              value={generateStateValueProp($state, ["radioGroup3", "value"])}
            >
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__hRLka)}
                value={"op1"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1M2CK
                  )}
                >
                  {"Option 1"}
                </div>
              </AntdRadio>
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__jsebL)}
                value={"op2"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___36NrB
                  )}
                >
                  {"Option 2"}
                </div>
              </AntdRadio>
            </AntdRadioGroup>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__bqcj)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__q662N
              )}
            >
              {"4\u3001\u7528\u5395"}
            </div>
            <AntdRadioGroup
              data-plasmic-name={"radioGroup4"}
              data-plasmic-override={overrides.radioGroup4}
              className={classNames("__wab_instance", sty.radioGroup4)}
              disabled={false}
              onChange={generateStateOnChangeProp($state, [
                "radioGroup4",
                "value"
              ])}
              optionType={"default"}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null, label: null }
                ];
                __composite["0"]["value"] = "\u4f9d\u8d56\u522b\u4eba";
                __composite["0"]["label"] = "\u4f9d\u8d56\u522b\u4eba";
                __composite["1"]["value"] = "\u9700\u90e8\u5206\u5e2e\u52a9 ";
                __composite["1"]["label"] = "\u9700\u90e8\u5206\u5e2e\u52a9 ";
                __composite["2"]["value"] = "\u81ea\u7406";
                __composite["2"]["label"] = "\u81ea\u7406";
                return __composite;
              })()}
              useChildren={false}
              value={generateStateValueProp($state, ["radioGroup4", "value"])}
            >
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__hFxoB)}
                value={"op1"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1HbZt
                  )}
                >
                  {"Option 1"}
                </div>
              </AntdRadio>
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__f8Xry)}
                value={"op2"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cvkA
                  )}
                >
                  {"Option 2"}
                </div>
              </AntdRadio>
            </AntdRadioGroup>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__t7F80)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bVmCv
              )}
            >
              {"5\u3001\u5403\u996d"}
            </div>
            <AntdRadioGroup
              data-plasmic-name={"radioGroup5"}
              data-plasmic-override={overrides.radioGroup5}
              className={classNames("__wab_instance", sty.radioGroup5)}
              disabled={false}
              onChange={generateStateOnChangeProp($state, [
                "radioGroup5",
                "value"
              ])}
              optionType={"default"}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null, label: null }
                ];
                __composite["0"]["value"] = "\u4f9d\u8d56\u522b\u4eba";
                __composite["0"]["label"] = "\u4f9d\u8d56\u522b\u4eba";
                __composite["1"]["value"] =
                  " \u9700\u90e8\u5206\u5e2e\u52a9\u5939\u996d\u3001\u76db\u996d\u3001\u5207\u9762\u5305 ";
                __composite["1"]["label"] =
                  " \u9700\u90e8\u5206\u5e2e\u52a9\u5939\u996d\u3001\u76db\u996d\u3001\u5207\u9762\u5305 ";
                __composite["2"]["value"] = "\u5168\u9762\u81ea\u7406";
                __composite["2"]["label"] = "\u5168\u9762\u81ea\u7406";
                return __composite;
              })()}
              useChildren={false}
              value={generateStateValueProp($state, ["radioGroup5", "value"])}
            >
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__f6Z76)}
                value={"op1"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l2Wu
                  )}
                >
                  {"Option 1"}
                </div>
              </AntdRadio>
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__brZtS)}
                value={"op2"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p5YZ7
                  )}
                >
                  {"Option 2"}
                </div>
              </AntdRadio>
            </AntdRadioGroup>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__kuNo2)}
            onClick={async event => {
              const $steps = {};

              $steps["goToPage"] = true
                ? (() => {
                    const actionArgs = {
                      destination: (() => {
                        try {
                          return $ctx.config.routePrefix + "/Scale";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sDy5Q
              )}
            >
              {"\u5b8c\u6210"}
            </div>
          </div>
        </div>
        <SideEffect
          data-plasmic-name={"sideEffect"}
          data-plasmic-override={overrides.sideEffect}
          className={classNames("__wab_instance", sty.sideEffect)}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "radioGroup",
    "radioGroup2",
    "radioGroup3",
    "radioGroup4",
    "radioGroup5",
    "sideEffect"
  ],
  radioGroup: ["radioGroup"],
  radioGroup2: ["radioGroup2"],
  radioGroup3: ["radioGroup3"],
  radioGroup4: ["radioGroup4"],
  radioGroup5: ["radioGroup5"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  radioGroup: typeof AntdRadioGroup;
  radioGroup2: typeof AntdRadioGroup;
  radioGroup3: typeof AntdRadioGroup;
  radioGroup4: typeof AntdRadioGroup;
  radioGroup5: typeof AntdRadioGroup;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_121FunctionalScale__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_121FunctionalScale__VariantsArgs;
    args?: Plasmic_121FunctionalScale__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_121FunctionalScale__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      Plasmic_121FunctionalScale__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmic_121FunctionalScale__ArgProps,
          internalVariantPropNames: Plasmic_121FunctionalScale__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic_121FunctionalScale__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_121FunctionalScale";
  } else {
    func.displayName = `Plasmic_121FunctionalScale.${nodeName}`;
  }
  return func;
}

export const Plasmic_121FunctionalScale = Object.assign(
  // Top-level Plasmic_121FunctionalScale renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    radioGroup: makeNodeComponent("radioGroup"),
    radioGroup2: makeNodeComponent("radioGroup2"),
    radioGroup3: makeNodeComponent("radioGroup3"),
    radioGroup4: makeNodeComponent("radioGroup4"),
    radioGroup5: makeNodeComponent("radioGroup5"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for Plasmic_121FunctionalScale
    internalVariantProps: Plasmic_121FunctionalScale__VariantProps,
    internalArgProps: Plasmic_121FunctionalScale__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default Plasmic_121FunctionalScale;
/* prettier-ignore-end */
