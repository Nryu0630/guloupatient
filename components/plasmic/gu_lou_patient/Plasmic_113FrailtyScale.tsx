// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oGeya3WnsoRJC1KzKAMsFn
// Component: lgI0frFnwOl3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oGeya3WnsoRJC1KzKAMsFn/projectcss
import sty from "./Plasmic_113FrailtyScale.module.css"; // plasmic-import: lgI0frFnwOl3/css

createPlasmicElementProxy;

export type Plasmic_113FrailtyScale__VariantMembers = {};
export type Plasmic_113FrailtyScale__VariantsArgs = {};
type VariantPropType = keyof Plasmic_113FrailtyScale__VariantsArgs;
export const Plasmic_113FrailtyScale__VariantProps =
  new Array<VariantPropType>();

export type Plasmic_113FrailtyScale__ArgsType = {};
type ArgPropType = keyof Plasmic_113FrailtyScale__ArgsType;
export const Plasmic_113FrailtyScale__ArgProps = new Array<ArgPropType>();

export type Plasmic_113FrailtyScale__OverridesType = {
  root?: Flex__<"div">;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  radioGroup2?: Flex__<typeof AntdRadioGroup>;
  radioGroup3?: Flex__<typeof AntdRadioGroup>;
  radioGroup4?: Flex__<typeof AntdRadioGroup>;
  radioGroup5?: Flex__<typeof AntdRadioGroup>;
};

export interface Default_113FrailtyScaleProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmic_113FrailtyScale__RenderFunc(props: {
  variants: Plasmic_113FrailtyScale__VariantsArgs;
  args: Plasmic_113FrailtyScale__ArgsType;
  overrides: Plasmic_113FrailtyScale__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "radioGroup2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "radioGroup3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "radioGroup4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "radioGroup5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__a2GTe)}>
          <div className={classNames(projectcss.all, sty.freeBox__vrTxO)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7PEjt
              )}
            >
              {"\u91cf\u8868"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__kVXt)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__rNpu)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"25%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return $ctx.config.routePrefix + "/";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
              src={{
                src: "/plasmic/gu_lou_patient/images/资源162Xpng.png",
                fullWidth: 198,
                fullHeight: 198,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__flAf
              )}
            >
              {"\u9000\u51fa"}
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__uku55)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__ttEX)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: "/plasmic/gu_lou_patient/images/_13879转换01Png.png",
              fullWidth: 1801,
              fullHeight: 521,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__peSBo
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{
                  id: "AVN3QdYWoz",
                  src: "衰弱量表",
                  dst: "Frailty scale",
                  metaData: ""
                }}
              >
                {"\u8870\u5f31\u91cf\u8868"}
              </span>
              <React.Fragment>{"\uff1a"}</React.Fragment>
            </React.Fragment>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__iPi76)}>
            <div className={classNames(projectcss.all, sty.freeBox___80KwQ)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uPx0
                )}
              >
                {"1\u3001\u60a8\u611f\u5230\u75b2\u52b3\u5417\uff1f"}
              </div>
              <AntdRadioGroup
                data-plasmic-name={"radioGroup"}
                data-plasmic-override={overrides.radioGroup}
                className={classNames("__wab_instance", sty.radioGroup)}
                disabled={false}
                onChange={generateStateOnChangeProp($state, [
                  "radioGroup",
                  "value"
                ])}
                optionType={"default"}
                options={(() => {
                  const __composite = [
                    { value: null, label: null },
                    { value: null, label: null }
                  ];
                  __composite["0"]["value"] = "\u662f";
                  __composite["0"]["label"] = "\u662f";
                  __composite["1"]["value"] = "\u5426";
                  __composite["1"]["label"] = "\u5426";
                  return __composite;
                })()}
                useChildren={false}
                value={generateStateValueProp($state, ["radioGroup", "value"])}
              >
                <AntdRadio
                  className={classNames("__wab_instance", sty.radio__zrIl)}
                  value={"op1"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5S1Bo
                    )}
                  >
                    {"Option 1"}
                  </div>
                </AntdRadio>
                <AntdRadio
                  className={classNames("__wab_instance", sty.radio__afr5)}
                  value={"op2"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___25S06
                    )}
                  >
                    {"Option 2"}
                  </div>
                </AntdRadio>
              </AntdRadioGroup>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___2RPvt)}>
            <div className={classNames(projectcss.all, sty.freeBox__zCnvD)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3O7Hn
                )}
              >
                {
                  "2\u3001\u60a8\u80fd\u4e0a\u4e00\u5c42\u697c\u68af\u5417\uff1f"
                }
              </div>
              <AntdRadioGroup
                data-plasmic-name={"radioGroup2"}
                data-plasmic-override={overrides.radioGroup2}
                className={classNames("__wab_instance", sty.radioGroup2)}
                disabled={false}
                onChange={generateStateOnChangeProp($state, [
                  "radioGroup2",
                  "value"
                ])}
                optionType={"default"}
                options={(() => {
                  const __composite = [
                    { value: null, label: null },
                    { value: null, label: null }
                  ];
                  __composite["0"]["value"] = "\u662f";
                  __composite["0"]["label"] = "\u662f";
                  __composite["1"]["value"] = "\u5426";
                  __composite["1"]["label"] = "\u5426";
                  return __composite;
                })()}
                useChildren={false}
                value={generateStateValueProp($state, ["radioGroup2", "value"])}
              >
                <AntdRadio
                  className={classNames("__wab_instance", sty.radio__fci6Z)}
                  value={"op1"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mwBDp
                    )}
                  >
                    {"Option 1"}
                  </div>
                </AntdRadio>
                <AntdRadio
                  className={classNames("__wab_instance", sty.radio__bCNaZ)}
                  value={"op2"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x0Jbh
                    )}
                  >
                    {"Option 2"}
                  </div>
                </AntdRadio>
              </AntdRadioGroup>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__qxP3W)}>
            <div className={classNames(projectcss.all, sty.freeBox__pXDnQ)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8Cs6A
                )}
              >
                {
                  "3\u3001\u60a8\u80fd\u884c\u8d70\u4e00\u4e2a\u8857\u533a\u7684\u8ddd\u79bb\u5417\uff1f"
                }
              </div>
              <AntdRadioGroup
                data-plasmic-name={"radioGroup3"}
                data-plasmic-override={overrides.radioGroup3}
                className={classNames("__wab_instance", sty.radioGroup3)}
                disabled={false}
                onChange={generateStateOnChangeProp($state, [
                  "radioGroup3",
                  "value"
                ])}
                optionType={"default"}
                options={(() => {
                  const __composite = [
                    { value: null, label: null },
                    { value: null, label: null }
                  ];
                  __composite["0"]["value"] = "\u662f";
                  __composite["0"]["label"] = "\u662f";
                  __composite["1"]["value"] = "\u5426";
                  __composite["1"]["label"] = "\u5426";
                  return __composite;
                })()}
                useChildren={false}
                value={generateStateValueProp($state, ["radioGroup3", "value"])}
              >
                <AntdRadio
                  className={classNames("__wab_instance", sty.radio__mZcTv)}
                  value={"op1"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___93KUk
                    )}
                  >
                    {"Option 1"}
                  </div>
                </AntdRadio>
                <AntdRadio
                  className={classNames("__wab_instance", sty.radio__lSv41)}
                  value={"op2"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__z8F4
                    )}
                  >
                    {"Option 2"}
                  </div>
                </AntdRadio>
              </AntdRadioGroup>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__i70Wo)}>
            <div className={classNames(projectcss.all, sty.freeBox__dCrUb)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hbSa
                )}
              >
                {
                  "4\u3001\u60a8\u60a3\u6709\u4e94\u79cd\u4ee5\u4e0a\u7684\u75be\u75c5\u5417\uff1f"
                }
              </div>
              <AntdRadioGroup
                data-plasmic-name={"radioGroup4"}
                data-plasmic-override={overrides.radioGroup4}
                className={classNames("__wab_instance", sty.radioGroup4)}
                disabled={false}
                onChange={generateStateOnChangeProp($state, [
                  "radioGroup4",
                  "value"
                ])}
                optionType={"default"}
                options={(() => {
                  const __composite = [
                    { value: null, label: null },
                    { value: null, label: null }
                  ];
                  __composite["0"]["value"] = "\u662f";
                  __composite["0"]["label"] = "\u662f";
                  __composite["1"]["value"] = "\u5426";
                  __composite["1"]["label"] = "\u5426";
                  return __composite;
                })()}
                useChildren={false}
                value={generateStateValueProp($state, ["radioGroup4", "value"])}
              >
                <AntdRadio
                  className={classNames("__wab_instance", sty.radio__vg0Pa)}
                  value={"op1"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eNq5J
                    )}
                  >
                    {"Option 1"}
                  </div>
                </AntdRadio>
                <AntdRadio
                  className={classNames("__wab_instance", sty.radio__qC411)}
                  value={"op2"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c8BJh
                    )}
                  >
                    {"Option 2"}
                  </div>
                </AntdRadio>
              </AntdRadioGroup>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__zi7Ia)}>
            <div className={classNames(projectcss.all, sty.freeBox__oqNhe)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uxKO
                )}
              >
                {
                  "5\u3001\u60a8\u6700\u8fd11\u5e74\u5185\u4f53\u91cd\u4e0b\u964d\u8d85\u8fc75%\u4e86\u5417\uff1f"
                }
              </div>
              <AntdRadioGroup
                data-plasmic-name={"radioGroup5"}
                data-plasmic-override={overrides.radioGroup5}
                className={classNames("__wab_instance", sty.radioGroup5)}
                disabled={false}
                onChange={generateStateOnChangeProp($state, [
                  "radioGroup5",
                  "value"
                ])}
                optionType={"default"}
                options={(() => {
                  const __composite = [
                    { value: null, label: null },
                    { value: null, label: null }
                  ];
                  __composite["0"]["value"] = "\u662f";
                  __composite["0"]["label"] = "\u662f";
                  __composite["1"]["value"] = "\u5426";
                  __composite["1"]["label"] = "\u5426";
                  return __composite;
                })()}
                useChildren={false}
                value={generateStateValueProp($state, ["radioGroup5", "value"])}
              >
                <AntdRadio
                  className={classNames("__wab_instance", sty.radio___1Spe6)}
                  value={"op1"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ee4H
                    )}
                  >
                    {"Option 1"}
                  </div>
                </AntdRadio>
                <AntdRadio
                  className={classNames("__wab_instance", sty.radio__blX2T)}
                  value={"op2"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pisAz
                    )}
                  >
                    {"Option 2"}
                  </div>
                </AntdRadio>
              </AntdRadioGroup>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__w2Zhq)}
            onClick={async event => {
              const $steps = {};

              $steps["goToPage"] = true
                ? (() => {
                    const actionArgs = {
                      destination: (() => {
                        try {
                          return $ctx.config.routePrefix + "/Preparation";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mtOcx
              )}
            >
              {"\u8fd4\u56de"}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "radioGroup",
    "radioGroup2",
    "radioGroup3",
    "radioGroup4",
    "radioGroup5"
  ],
  radioGroup: ["radioGroup"],
  radioGroup2: ["radioGroup2"],
  radioGroup3: ["radioGroup3"],
  radioGroup4: ["radioGroup4"],
  radioGroup5: ["radioGroup5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  radioGroup: typeof AntdRadioGroup;
  radioGroup2: typeof AntdRadioGroup;
  radioGroup3: typeof AntdRadioGroup;
  radioGroup4: typeof AntdRadioGroup;
  radioGroup5: typeof AntdRadioGroup;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_113FrailtyScale__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_113FrailtyScale__VariantsArgs;
    args?: Plasmic_113FrailtyScale__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_113FrailtyScale__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      Plasmic_113FrailtyScale__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmic_113FrailtyScale__ArgProps,
          internalVariantPropNames: Plasmic_113FrailtyScale__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic_113FrailtyScale__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_113FrailtyScale";
  } else {
    func.displayName = `Plasmic_113FrailtyScale.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"oGeya3WnsoRJC1KzKAMsFn"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "oGeya3WnsoRJC1KzKAMsFn"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const Plasmic_113FrailtyScale = Object.assign(
  // Top-level Plasmic_113FrailtyScale renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    radioGroup: makeNodeComponent("radioGroup"),
    radioGroup2: makeNodeComponent("radioGroup2"),
    radioGroup3: makeNodeComponent("radioGroup3"),
    radioGroup4: makeNodeComponent("radioGroup4"),
    radioGroup5: makeNodeComponent("radioGroup5"),

    // Metadata about props expected for Plasmic_113FrailtyScale
    internalVariantProps: Plasmic_113FrailtyScale__VariantProps,
    internalArgProps: Plasmic_113FrailtyScale__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default Plasmic_113FrailtyScale;
/* prettier-ignore-end */
